{-# OPTIONS  --allow-unsolved-metas #-}

module agda.Functors where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)
open import Axiom.Extensionality.Propositional using (Extensionality)
open import agda.Category
open import Level

-- Functor defined  w/o laws between two PreCategories
record Functor {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level } (C : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) (D : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
  private module C = PreCategory C
  private module D = PreCategory D
  field
    F‚ÇÄ : C.Ob -> D.Ob
    F‚ÇÅ : ‚àÄ {A B} (f : C._‚áí_ A B ) -> D._‚áí_ (F‚ÇÄ A) (F‚ÇÄ B)

    identity : ‚àÄ {A} -> (F‚ÇÅ (C.id {A})) ‚â° D.id {(F‚ÇÄ A)}
    homomorphism : ‚àÄ {A B C} -> (f : C._‚áí_ A B) -> (g : C._‚áí_ B C) ->
      F‚ÇÅ (C._‚àò_ g f) ‚â° D._‚àò_ (F‚ÇÅ g) (F‚ÇÅ f)

functor-‚àò : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level } (‚Ñ¨ ùíû ùíü : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) -> (‚Ñ± : Functor ùíû ùíü) -> (ùí¢ : Functor ‚Ñ¨ ùíû) -> Functor ‚Ñ¨ ùíü
functor-‚àò = Œª ‚Ñ¨ ùíû ùíü -> Œª ‚Ñ± ùí¢ -> record
  { F‚ÇÄ = Œª b -> Functor.F‚ÇÄ ‚Ñ± (Functor.F‚ÇÄ ùí¢ b) -- some object A in ‚Ñ¨   to  ‚Ñ± ( ùí¢ A) an object in ùíü
  ; F‚ÇÅ = Œª Bf -> Functor.F‚ÇÅ ‚Ñ± (Functor.F‚ÇÅ ùí¢ Bf) -- some arrow f : A ‚áí B in ‚Ñ¨ to ‚Ñ± ( ùí¢ f) an arrow ‚Ñ± ( ùí¢ A) ‚áí ‚Ñ± ( ùí¢ B) in ùíü
  ; identity =  Œª {B} -> cong (Œª x -> ?) {!   !}  --Œª {B} -> cong {! (Functor.identity ùí¢)  !} {!   !}
  ; homomorphism = _
  }

-- TODO Bifunctor composition

-- really a functor from a product category to a category
record BiFunctor {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level} (C : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) (D : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) (E : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
  private module C = PreCategory C
  private module D = PreCategory D
  private module E = PreCategory E
  field
    F‚ÇÄ : E.Ob -- TODO
