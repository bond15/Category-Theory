module agda.Category where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong; cong‚ÇÇ)
open import Data.Product using (_√ó_; _,_) renaming (proj‚ÇÅ to œÄ‚ÇÅ; proj‚ÇÇ to œÄ‚ÇÇ)
open import agda.Theorems using (extensionality)

open import Level

-- same definitions in Relation.Binary using (Rel)

REL : ‚àÄ { ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level} -> Set ‚Ñì‚ÇÅ -> Set ‚Ñì‚ÇÇ -> (‚Ñì‚ÇÉ : Level) -> Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî suc ‚Ñì‚ÇÉ)
REL A B ‚Ñì = A -> B -> Set ‚Ñì

Rel : ‚àÄ {‚Ñì‚ÇÅ : Level} -> Set ‚Ñì‚ÇÅ -> (‚Ñì‚ÇÇ : Level) -> Set (‚Ñì‚ÇÅ ‚äî suc ‚Ñì‚ÇÇ)
Rel A ‚Ñì = REL A A ‚Ñì


-- in agda-categories,
-- they abstract over the equality type
record PreCategory(l m : Level) : Set(suc (l ‚äî m)) where
  field
    Ob : Set l
    _‚áí_ : Rel Ob m
    _‚àò_¬† : ‚àÄ {x y z : Ob} -> y ‚áí z -> x ‚áí y -> x ‚áí z
    id : ‚àÄ {o : Ob} -> o ‚áí o
    idÀ° : ‚àÄ {x y : Ob} (f : x ‚áí y) -> f ‚àò (id {x}) ‚â° f
    id ≥ : ‚àÄ {x y : Ob} (f : x ‚áí y) -> (id {y}) ‚àò f ‚â° f
    ‚àò-assoc : ‚àÄ {x y z w : Ob} (f : x ‚áí y) (g : y ‚áí z) (h : z ‚áí w) -> h ‚àò (g ‚àò f) ‚â° (h ‚àò g) ‚àò f

module Product where

  ProductCategory : {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ ‚Ñì‚ÇÑ : Level} (ùíû : PreCategory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) (ùíü : PreCategory ‚Ñì‚ÇÉ ‚Ñì‚ÇÑ) -> (PreCategory (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÉ) (‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÑ))
  ProductCategory ùíû ùíü = record
    { Ob = ùíû.Ob √ó ùíü.Ob
    ; _‚áí_ = Œª c√ód -> Œª c√ód' -> (ùíû._‚áí_ (œÄ‚ÇÅ c√ód) (œÄ‚ÇÅ c√ód')) √ó (ùíü._‚áí_ (œÄ‚ÇÇ c√ód) (œÄ‚ÇÇ c√ód'))
    ; _‚àò_ = Œª ff -> Œª gg ->  (ùíû._‚àò_ (œÄ‚ÇÅ ff) (œÄ‚ÇÅ gg)) ,  (ùíü._‚àò_ (œÄ‚ÇÇ ff) (œÄ‚ÇÇ gg) )
    ; id = ùíû.id , ùíü.id
    ; idÀ° = Œª ff -> cong‚ÇÇ _,_ (ùíû.idÀ° (œÄ‚ÇÅ ff)) (ùíü.idÀ° (œÄ‚ÇÇ ff))
    ; id ≥ = Œª ff -> cong‚ÇÇ _,_ (ùíû.id ≥ (œÄ‚ÇÅ ff)) (ùíü.id ≥ (œÄ‚ÇÇ ff))
    ; ‚àò-assoc = Œª ff -> Œª gg -> Œª hh -> cong‚ÇÇ _,_ (ùíû.‚àò-assoc (œÄ‚ÇÅ ff) (œÄ‚ÇÅ gg) (œÄ‚ÇÅ hh)) (ùíü.‚àò-assoc (œÄ‚ÇÇ ff) (œÄ‚ÇÇ gg) (œÄ‚ÇÇ hh))
    } where
      module ùíû = PreCategory ùíû
      module ùíü = PreCategory ùíü
      -- evidence of suffering

      --_ :  Rel (Set‚ÇÄ √ó Set‚ÇÄ) zero
      --_ = Œª p‚ÇÅ -> Œª p‚ÇÇ -> (((fst p‚ÇÅ) -> (fst p‚ÇÇ)) √ó ((snd p‚ÇÅ) -> (snd p‚ÇÇ)))

      --_ : (r‚ÇÅ : Rel Set‚ÇÄ zero) -> (r‚ÇÇ : Rel Set‚ÇÄ zero ) -> Rel (Set‚ÇÄ √ó Set‚ÇÄ) zero
      --_ = Œª r‚ÇÅ -> Œª r‚ÇÇ -> Œª p‚ÇÅ -> Œª p‚ÇÇ -> (r‚ÇÅ (fst p‚ÇÅ) (fst p‚ÇÅ)) √ó (r‚ÇÇ (snd p‚ÇÅ) (snd p‚ÇÇ))


      -- _ : ‚àÄ (A B C D : Set) -> (ev‚ÇÅ : A ‚â° C) -> (ev‚ÇÇ : B ‚â° D) -> ((A √ó B) ‚â° (C √ó D))
      -- _ = Œª A B C D -> Œª ev‚ÇÅ ev‚ÇÇ -> cong‚ÇÇ _√ó_ ev‚ÇÅ ev‚ÇÇ











--
